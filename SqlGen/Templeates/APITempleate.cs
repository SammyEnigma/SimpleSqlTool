// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SqlGen.Templeates
{
    using System.Linq;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Xml;
    using SqlGen;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class APITempleate : APITempleateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Syste" +
                    "m.Threading.Tasks;\r\nusing AutoMapper;\r\nusing AutoWrapper.Wrappers;\r\nusing ");
            
            #line 20 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".Contracts;\r\nusing ");
            
            #line 21 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".Data;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Htt" +
                    "p;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Logging;\r\nusing " +
                    "");
            
            #line 26 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".DTO.Response;\r\nusing ");
            
            #line 27 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".DTO.Request;\r\nusing ");
            
            #line 28 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".Data.DataManager;\r\nusing Microsoft.Extensions.Configuration;\r\nusing static Micro" +
                    "soft.AspNetCore.Http.StatusCodes;\r\nusing ");
            
            #line 31 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".Data.Entity;\r\nusing System.Text.Json;\r\nusing AutoWrapper.Extensions;\r\n\r\nnamespac" +
                    "e ");
            
            #line 35 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write(".API.v1\r\n{\r\n    [Route(\"api/v1/[controller]\")]\r\n    [ApiController]\r\n    //[Autho" +
                    "rize]\r\n    public class ");
            
            #line 40 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Controller : ControllerBase\r\n    {\r\n        private ILogger<");
            
            #line 42 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Controller> _logger;\r\n        private I");
            
            #line 43 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Manager _");
            
            #line 43 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager;\r\n        private IMapper _mapper;\r\n\r\n        public ");
            
            #line 46 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Controller(IConfiguration config, \r\n        IMapper mapper,\r\n        I");
            
            #line 48 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Manager ");
            
            #line 48 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager,\r\n        ILogger<");
            
            #line 49 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Controller> logger)\r\n        {\r\n            _logger = logger;        \r\n          " +
                    "  _mapper = mapper;\r\n            _");
            
            #line 53 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager = ");
            
            #line 53 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager;\r\n        }\r\n\r\n\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 59 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(" kayıt servisi\r\n        /// </summary>\r\n        /// <param name=\"dto\">\r\n        /" +
                    "// <see cref=\"Create");
            
            #line 62 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Request\"/>\r\n        /// </param>\r\n        /// <returns></returns>\r\n        [HttpP" +
                    "ost]\r\n        public async Task<ApiResponse> Post([FromBody] Create");
            
            #line 66 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Request dto)\r\n        {\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n  " +
                    "              \r\n                var data = _mapper.Map<");
            
            #line 72 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(">(dto);\r\n                if (await  _");
            
            #line 73 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager.ExistAsync(data.unique))\r\n                    throw new ApiException($\"Re" +
                    "cord Already Exists\", Status202Accepted);\r\n\r\n                return new ApiRespo" +
                    "nse(\"Record successfully created.\", await _");
            
            #line 76 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager.CreateAsync(data), Status201Created);\r\n            }\r\n            else\r\n " +
                    "               throw new ApiException(ModelState.AllErrors());\r\n        }\r\n     " +
                    "   \r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 84 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(" güncelleme servisi\r\n        /// </summary>\r\n        /// <param name=\"id\">\r\n     " +
                    "   /// Kayıt Id si\r\n        /// </param>\r\n        /// <param name=\"dto\">\r\n      " +
                    "  /// Kayıt güncelleme bilgileri <see cref=\"Update");
            
            #line 90 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Request\"/>\r\n        /// </param>\r\n        /// <returns></returns>\r\n        [Route" +
                    "(\"{id:long}\")]\r\n        [HttpPut]\r\n        public async Task<ApiResponse> Put(lo" +
                    "ng id, [FromBody] Update");
            
            #line 95 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Request dto)\r\n        {\r\n            if (ModelState.IsValid)\r\n            {\r\n    " +
                    "            var data = _mapper.Map<");
            
            #line 99 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(">(dto);\r\n                data.id = id;\r\n\r\n                if (await _");
            
            #line 102 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(@"Manager.UpdateAsync(data))
                    return new ApiResponse($""Record with Id: {id} sucessfully updated."", true);
                else
                    throw new ApiException($""Record with Id: {id} does not exist."", Status404NotFound);
            }
            else
                throw new ApiException(ModelState.AllErrors());
        }

        
        /// <summary>
        /// ");
            
            #line 113 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(@" delete service
        /// </summary>
        /// <param name=""id"">
        /// Record Id si
        /// </param>
        /// <returns>
        /// <see cref=""ApiResponse""/>
        /// </returns>
        [Route(""{id:long}"")]
        [HttpDelete]
        public async Task<ApiResponse> Delete(long id)
        {
            if (await _");
            
            #line 125 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(@"Manager.DeleteAsync(id))
            {
                _logger.LogInformation($""Record with Id: {id} sucessfully deleted."");
                return new ApiResponse($""Record with Id: {id} sucessfully deleted."", true);
            }                
            else
                throw new ApiException($""Record with id: {id} does not exist."", Status404NotFound);
        }

        /// <summary>
        /// ");
            
            #line 135 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(" get service\r\n        /// </summary>\r\n        /// <param name=\"id\">\r\n        /// " +
                    "Record Id \r\n        /// </param>\r\n        /// <returns>\r\n        /// <see cref=\"" +
                    "");
            
            #line 141 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>\"/>\r\n        [Route(\"{id:long}\")]\r\n        [HttpGet]\r\n        public asy" +
                    "nc Task<");
            
            #line 144 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>> Get(long id)\r\n        {\r\n            var data = await  _");
            
            #line 146 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(@"Manager.GetByIdAsync(id);
            if (data == null)
            {
                _logger.LogWarning($@""No records Found with CustomerID : {id}"");
                throw new ApiException($@""No records Found"");
            }

            return _mapper.Map<");
            
            #line 153 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>(data);;\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 158 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(" get pagination service\r\n        /// </summary>\r\n        /// <param name=\"UrlQuer" +
                    "ySearchParameters\">\r\n        ///  search parameter\r\n        /// </param>\r\n      " +
                    "  /// <returns>\r\n        /// <see cref=\"IEnumerable<");
            
            #line 164 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>\"/>\r\n        [Route(\"paged\")]\r\n        [HttpGet]        \r\n        public" +
                    " async Task<IEnumerable<");
            
            #line 167 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>> Get([FromQuery] UrlQuerySearchParameters urlQueryParameters)\r\n        " +
                    "{\r\n\r\n            \r\n            var data = await _");
            
            #line 171 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Manager.Search");
            
            #line 171 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Async(urlQueryParameters);\r\n            if (data.");
            
            #line 172 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                throw new ApiException(\"No records Foun" +
                    "d\");\r\n            }\r\n\r\n            var response = _mapper.Map<IEnumerable<");
            
            #line 177 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write("Response>>(data.");
            
            #line 177 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameToPascal));
            
            #line default
            #line hidden
            this.Write(@");

            //4 reading header value of access pagination values
            Response.Headers.Add(""Access-Control-Expose-Headers"", ""X-Pagination"");            
            Response.Headers.Add(""X-Pagination"", JsonSerializer.Serialize(data.Pagination));

            return response;
        }

        

    }
}
");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\USER\Desktop\SimpleSqlTool\SqlGen\Templeates\APITempleate.tt"

private string @__namespaceField;

/// <summary>
/// Access the _namespace parameter of the template.
/// </summary>
private string _namespace
{
    get
    {
        return this.@__namespaceField;
    }
}

private string _tableNameField;

/// <summary>
/// Access the tableName parameter of the template.
/// </summary>
private string tableName
{
    get
    {
        return this._tableNameField;
    }
}

private string _tableNameToLowerField;

/// <summary>
/// Access the tableNameToLower parameter of the template.
/// </summary>
private string tableNameToLower
{
    get
    {
        return this._tableNameToLowerField;
    }
}

private global::System.Collections.Generic.IEnumerable<Column> _columnsField;

/// <summary>
/// Access the columns parameter of the template.
/// </summary>
private global::System.Collections.Generic.IEnumerable<Column> columns
{
    get
    {
        return this._columnsField;
    }
}

private string _tableNameToPascalField;

/// <summary>
/// Access the tableNameToPascal parameter of the template.
/// </summary>
private string tableNameToPascal
{
    get
    {
        return this._tableNameToPascalField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool _namespaceValueAcquired = false;
if (this.Session.ContainsKey("_namespace"))
{
    this.@__namespaceField = ((string)(this.Session["_namespace"]));
    _namespaceValueAcquired = true;
}
if ((_namespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("_namespace");
    if ((data != null))
    {
        this.@__namespaceField = ((string)(data));
    }
}
bool tableNameValueAcquired = false;
if (this.Session.ContainsKey("tableName"))
{
    this._tableNameField = ((string)(this.Session["tableName"]));
    tableNameValueAcquired = true;
}
if ((tableNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("tableName");
    if ((data != null))
    {
        this._tableNameField = ((string)(data));
    }
}
bool tableNameToLowerValueAcquired = false;
if (this.Session.ContainsKey("tableNameToLower"))
{
    this._tableNameToLowerField = ((string)(this.Session["tableNameToLower"]));
    tableNameToLowerValueAcquired = true;
}
if ((tableNameToLowerValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("tableNameToLower");
    if ((data != null))
    {
        this._tableNameToLowerField = ((string)(data));
    }
}
bool columnsValueAcquired = false;
if (this.Session.ContainsKey("columns"))
{
    this._columnsField = ((global::System.Collections.Generic.IEnumerable<Column>)(this.Session["columns"]));
    columnsValueAcquired = true;
}
if ((columnsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("columns");
    if ((data != null))
    {
        this._columnsField = ((global::System.Collections.Generic.IEnumerable<Column>)(data));
    }
}
bool tableNameToPascalValueAcquired = false;
if (this.Session.ContainsKey("tableNameToPascal"))
{
    this._tableNameToPascalField = ((string)(this.Session["tableNameToPascal"]));
    tableNameToPascalValueAcquired = true;
}
if ((tableNameToPascalValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("tableNameToPascal");
    if ((data != null))
    {
        this._tableNameToPascalField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class APITempleateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
